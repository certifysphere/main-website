"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1339],{3741:e=>{e.exports=JSON.parse('{"label":"Rest services","permalink":"/main-website/docs/tags/rest-services","allTagsPath":"/main-website/docs/tags","count":6,"items":[{"id":"labs/workshops/react-springboot-Workshop/spring-rest-api--docker-aws-ecs-terraform-part-2","title":"Deploy Spring REST API to AWS ECS Fargate - Terraform - Part-2","description":"This chapter is a continuation of the previous chapter, Dockerized Java Spring Boot Rest API - Part-1. In the previous chapter, we completed several tasks to set up our environment for deploying our Spring Boot Rest API on AWS. These tasks included:","permalink":"/main-website/docs/labs/workshops/react-springboot-Workshop/spring-rest-api--docker-aws-ecs-terraform-part-2"},{"id":"labs/workshops/react-springboot-Workshop/dockerized-spring-boot-rest-api","title":"Dockerized SpringBoot Java App","description":"In this chapter, we will learn how to deploy a Java Spring Boot REST API to AWS Lambda as a Docker container using Terraform. We will also explore how to expose the API endpoint using AWS API Gateway.","permalink":"/main-website/docs/labs/workshops/react-springboot-Workshop/dockerized-spring-boot-rest-api"},{"id":"labs/workshops/react-springboot-Workshop/react-calling-spring-rest-services","title":"Integrating React UI with Spring Rest Services","description":"In this chapter, we are integrating the React UI with the Spring Rest Services. Now the frontend React app will make HTTP REST API calls to the backend Spring services for CRUD operations. The backend Spring REST API will store data in an in-memory H2 database. In the next chapter, we will replace the H2 in-memory database with PostgreSQL.","permalink":"/main-website/docs/labs/workshops/react-springboot-Workshop/react-calling-spring-rest-services"},{"id":"labs/workshops/react-springboot-Workshop/nodejs-backend-crud-rest-api","title":"NodeJS Backend Rest API","description":"In this chapter, we will focus on creating a NodeJS application that serves as a backend REST API for performing CRUD (Create, Read, Update, Delete) operations on Public Toilets APP.","permalink":"/main-website/docs/labs/workshops/react-springboot-Workshop/nodejs-backend-crud-rest-api"},{"id":"labs/workshops/react-springboot-Workshop/springboot-rest-services-part-1","title":"Springboot Rest Services - Part-1","description":"In this chapter, we will focus on creating a Spring Boot application that serves as a backend REST API for performing CRUD (Create, Read, Update, Delete) operations on Public Toilets. We will utilize an in-memory H2 database to store the data temporarily. In the subsequent chapter, we will replace the in-memory data store with a persistent database.","permalink":"/main-website/docs/labs/workshops/react-springboot-Workshop/springboot-rest-services-part-1"},{"id":"labs/workshops/react-springboot-Workshop/springboot-rest-services-part-2","title":"Springboot Rest Services - Part-2","description":"Spring Application","permalink":"/main-website/docs/labs/workshops/react-springboot-Workshop/springboot-rest-services-part-2"}]}')}}]);