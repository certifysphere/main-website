"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3811],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),d=o,f=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8754:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:2,id:"python-functions",title:"Functions and Function Parameters",tags:["Python","functions"]},i=void 0,l={unversionedId:"tuts/tutorials/programming/python/python-functions",id:"tuts/tutorials/programming/python/python-functions",title:"Functions and Function Parameters",description:"Functions are blocks of reusable code that perform specific tasks. They allow you to break down your code into smaller, manageable pieces, improving code organization and reusability. In Python, you can define functions using the def keyword. Here's an example:",source:"@site/docs/tuts/tutorials/programming/python/2.1-functions.md",sourceDirName:"tuts/tutorials/programming/python",slug:"/tuts/tutorials/programming/python/python-functions",permalink:"/main-website/docs/tuts/tutorials/programming/python/python-functions",draft:!1,tags:[{label:"Python",permalink:"/main-website/docs/tags/python"},{label:"functions",permalink:"/main-website/docs/tags/functions"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"python-functions",title:"Functions and Function Parameters",tags:["Python","functions"]},sidebar:"tutorialSidebar",previous:{title:"Python Basics",permalink:"/main-website/docs/tuts/tutorials/programming/python/python-basics"},next:{title:"Working with Files and Input/Output",permalink:"/main-website/docs/tuts/tutorials/programming/python/working-with-files-and-input-output"}},s={},u=[{value:"Github Repo",id:"github-repo",level:3}],p={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Functions are blocks of reusable code that perform specific tasks. They allow you to break down your code into smaller, manageable pieces, improving code organization and reusability. In Python, you can define functions using the ",(0,o.kt)("inlineCode",{parentName:"p"},"def")," keyword. Here's an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def greet():\n    print("Hello, world!")\n\n# Calling the function\ngreet()  # Output: Hello, world!\n')),(0,o.kt)("p",null,"Functions can also accept parameters, which are values passed to the function for it to work with. Parameters allow functions to be more flexible and generic. Here's an example of a function with parameters:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def greet(name):\n    print(f"Hello, {name}!")\n\n# Calling the function with an argument\ngreet("Alice")  # Output: Hello, Alice!\n')),(0,o.kt)("p",null,"You can also specify default parameter values, making them optional when calling the function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def greet(name="world"):\n    print(f"Hello, {name}!")\n\n# Calling the function without providing an argument\ngreet()  # Output: Hello, world!\n')),(0,o.kt)("p",null,"Functions can have multiple parameters, and you can pass arguments to them by position or by keyword:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def add(a, b):\n    return a + b\n\n# Calling the function by position\nresult = add(2, 3)  # Output: 5\n\n# Calling the function by keyword\nresult = add(a=2, b=3)  # Output: 5\n")),(0,o.kt)("p",null,"Python also supports variable-length arguments using the ",(0,o.kt)("inlineCode",{parentName:"p"},"*args")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"**kwargs")," syntax. These allow you to pass a varying number of arguments to a function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def calculate_sum(*args):\n    total = sum(args)\n    return total\n\nresult = calculate_sum(1, 2, 3, 4, 5)  # Output: 15\n")),(0,o.kt)("p",null,"In addition to positional parameters, you can use keyword arguments to specify values for specific parameters:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def calculate_product(a, b, c):\n    product = a * b * c\n    return product\n\nresult = calculate_product(a=2, b=3, c=4)  # Output: 24\n")),(0,o.kt)("p",null,"By using functions and function parameters effectively, you can modularize your code, improve code reuse, and make your code more flexible and adaptable."),(0,o.kt)("p",null,'In this section, we covered "Functions and Function Parameters." These concepts are fundamental to Python programming and play a crucial role in structuring your code and making it more reusable and modular.'),(0,o.kt)("p",null,"Next, where we'll explore libraries and frameworks commonly used in Python development."),(0,o.kt)("h3",{id:"github-repo"},"Github Repo"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"  You can refer to and clone the code samples for this tutorial from the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/certifysphere/python-code-samples"},"GitHub repository"),"."),(0,o.kt)("p",{parentName:"admonition"},"  To clone the repository, you can use the following command:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/certifysphere/python-code-samples.git\n")),(0,o.kt)("p",{parentName:"admonition"},"  You can then navigate to the ",(0,o.kt)("inlineCode",{parentName:"p"},"/src")," directory to access all the code samples given in this tutorial. ")))}m.isMDXComponent=!0}}]);